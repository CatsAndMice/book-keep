{"version":3,"sources":["main.js","src/fromTest/StrategyFromTest.js","src/fromTest/FromTest.js","src/tool/index.js","src/mathTool/MathTool.js","src/calendar/Calendar.js","src/myEvent/MyEvent.js","src/debounceAndThrottle/DebounceAndThrottle.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AGTA,ADGA;AHUA,AENA,ADGA,AGTA,ADGA;ADIA,ADGA,AGTA,ADGA;AELA,AHSA,ADGA,AGTA,ADGA;AELA,AHSA,ADGA,AGTA,ADGA;AELA,AHSA,ADGA,AGTA,ADGA;AELA,AHSA,ADGA,AGTA,AENA,AHSA;AELA,AHSA,ADGA,AGTA,AENA,AHSA;AELA,AHSA,ADGA,AGTA,AENA,AHSA;AELA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AGTA,AENA;ADIA,AENA,ALeA,ADGA,AKfA;ADIA,AENA,ALeA,ADGA,AKfA;ADIA,AENA,ALeA,ADGA,AKfA;ADIA,AENA,ALeA,ADGA,AKfA;ADIA,AENA,ALeA,ADGA,AKfA;ADIA,AENA,ALeA,ADGA,AKfA;ADIA,AENA,ALeA,ADGA,AKfA;ADIA,AENA,ALeA,ADGA,AKfA;ADIA,AENA,ALeA,ADGA,AKfA;ADIA,AENA,ALeA,ADGA,AKfA;ADIA,AENA,ALeA,ADGA,AKfA;ADIA,AENA,ALeA,ADGA,AKfA;ADIA,AENA,ALeA,ADGA,AKfA;ADIA,AENA,ALeA,ADGA,AKfA;ADIA,AENA,ALeA,ADGA,AKfA;ADIA,AENA,ALeA,ADGA,AKfA;ADIA,AENA,ALeA,AIZA;ADIA,AENA,ALeA,AIZA;ADIA,AENA,ALeA,AIZA;ADIA,AENA,ALeA,AIZA;ADIA,AENA,ALeA,AIZA;ADIA,AENA,ALeA,AIZA;ADIA,AENA,ALeA,AIZA;ADIA,AENA,ALeA,AIZA;ADIA,AENA,ALeA;AGRA,AENA,ALeA;AGRA,AENA,ALeA;AGRA,AENA,ALeA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["const StrategyFrom = require(\"./src/fromTest/StrategyFromTest\"),\r\n    MathTool = require('./src/mathTool/MathTool'),\r\n    Calendar = require('./src/calendar/Calendar'),\r\n    // MyStorage = require('./src/webStorage'),\r\n    MyEvent = require('./src/myEvent/MyEvent'),\r\n    DebounceAndThrottle = require('./src/debounceAndThrottle/DebounceAndThrottle');\r\nmodule.exports = {\r\n    StrategyFrom,\r\n    MathTool,\r\n    Calendar,\r\n    // MyStorage,\r\n    MyEvent,\r\n    DebounceAndThrottle\r\n}","const FromTest = require('./FromTest'),\r\n    MyTool = require('../tool');\r\n/**\r\n * 调用表单校验策略类\r\n * @class\r\n */\r\nclass StrategyFromTest {\r\n    constructor(FromTest) {\r\n        this.FromTest = FromTest;\r\n        this.cacheTest = [];\r\n    }\r\n\r\n    _clearCache() {\r\n        this.cacheTest.length = 0;\r\n    }\r\n\r\n    _triggerErrorFn(fn) {\r\n        this._clearCache();\r\n        fn();\r\n        return false;\r\n    }\r\n\r\n    _moreConfig(dataSource, config) {\r\n        for (const conf of config) {\r\n            this._oneConfig(dataSource, conf);\r\n        }\r\n    }\r\n\r\n    _oneConfig(dataSource, config) {\r\n        let { description, errorFn = function () { } } = config,\r\n            [methodName, value] = description.split(\":\");\r\n        //传入value优先级比截取高\r\n        value = config.value ? config.value : value;\r\n        this.cacheTest.push({ dataSource, methodName, value, errorFn });\r\n    }\r\n\r\n    /**\r\n     * 开始校验表单\r\n     * @returns Boolean\r\n     */\r\n    start() {\r\n        if (!this.cacheTest.length) return;\r\n        while (this.cacheTest.length) {\r\n            let test = this.cacheTest.shift(),\r\n                { dataSource, methodName, value, errorFn } = test,\r\n                isHaveMehtod = methodName in this.FromTest;\r\n            if (isHaveMehtod) {\r\n                if (!this.FromTest[methodName](dataSource, value)) {\r\n                    return this._triggerErrorFn(errorFn);\r\n                }\r\n            } else {\r\n                this._clearCache();\r\n                return MyTool._warn(`${methodName}访方法不存在`);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 表单校验添加至缓存区\r\n     * @param {any} dataSource 需要校验表单值\r\n     * @param {Object | [Object]} config 表单需要满足的要求\r\n     */\r\n    addCacheTest(dataSource, config) {\r\n        let isArr = Array.isArray(config);\r\n        isArr ? this._moreConfig(dataSource, config) : this._oneConfig(dataSource, config);\r\n    }\r\n}\r\n\r\nmodule.exports = new StrategyFromTest(FromTest);","const MyTool = require('../tool'),\r\n    telReg = /^(0|86|17951)?(13[0-9]|15[012356789]|166|17[3678]|18[0-9]|14[57])[0-9]{8}$/,\r\n    emailReg = /\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/;\r\n/**\r\n * 表单校验方法类\r\n * @class\r\n */\r\nclass FromTest {\r\n    /**\r\n     * 数组长度不为0\r\n     * @param {Array} dataSource 值 \r\n     * @returns Boolean\r\n     */\r\n    islengthNoZero(dataSource) {\r\n        let isArr = Array.isArray(dataSource);\r\n        if (isArr) {\r\n            return dataSource.length !== 0;\r\n        }\r\n        MyTool._warn(`${dataSource}不是Array类型`)\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 值不为空\r\n     * @param {String|Number} dataSource 值\r\n     * @returns Boolean\r\n     * \r\n     */\r\n    isValueNoEmpty(dataSource) {\r\n        return dataSource === '' ? false : this.isValueNoUndefined(dataSource);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {any} dataSource \r\n     * @returns Boolean\r\n     */\r\n    isValueNoUndefined(dataSource) {\r\n        let type = typeof dataSource;\r\n        return type !== \"undefined\";\r\n    }\r\n\r\n    /**\r\n     * 电话号码是否符合正确的格式\r\n     * @param {String} dataSource 电话号码 \r\n     * @returns Boolean\r\n     */\r\n    isQualifiedTel(dataSource) {\r\n        return telReg.test(dataSource);\r\n    }\r\n\r\n    /**\r\n     * 电子邮件是否符合正确的格式\r\n     * @param {String} dataSource 邮箱 \r\n     * @returns Boolean \r\n     */\r\n    isQualifiedEmail(dataSource) {\r\n        return emailReg.test(dataSource);\r\n    }\r\n\r\n    /**\r\n     * 值是否相同\r\n     * @param {String | number} dataSource 表单实际值\r\n     * @param {String | number} value 比较大小的目标值 \r\n     * @returns Boolean\r\n     */\r\n    isEqualsValue(dataSource, value) {\r\n        return dataSource === value ? true : false;\r\n    }\r\n\r\n    /**\r\n    * 校验表单是否小于某个值\r\n    * @param {String | Number} dataSource 表单实际值\r\n    * @param {String | Number} value 比较大小的目标值 \r\n    */\r\n    isLessThenValue(dataSource, value) {\r\n        return dataSource < value;\r\n    }\r\n\r\n    /**\r\n     * 校验表单是否大于某个值\r\n     * @param {String | Number} dataSource 表单实际值\r\n     * @param {String | Number} value 比较大小的目标值 \r\n     * @returns \r\n     */\r\n    isGreaterThanValue(dataSource, value) {\r\n        return dataSource > value;\r\n    }\r\n\r\n    /**\r\n     * 校验密码长度\r\n     * @param {String | Number} dataSource 密码值 \r\n     * @param {Number} value 密码需要的最小长度\r\n     */\r\n    isPaddWordMinLen(dataSource, value) {\r\n        let len = Number(value),\r\n            isNan = Number.isNaN(len),\r\n            isDataSourceLessThenValue = String(dataSource).length < value;\r\n        return isNan ? MyMyTool._warn('传入值无法转化成Number类型,请检查!') : !isDataSourceLessThenValue;\r\n    }\r\n\r\n\r\n}\r\nmodule.exports = new FromTest();","module.exports = {\r\n    isValueNoEmpty: { description: 'isValueNoEmpty' },\r\n    _warn(msg) {\r\n        console.warn(msg);\r\n        return false;\r\n    },\r\n    _error(msg) {\r\n        console.error(msg);\r\n        return false;\r\n    },\r\n\r\n}","/**处理数字转换常用类\r\n * @class \r\n */\r\nclass MathTool {\r\n    /**\r\n     * 随机获取一个范围内的值\r\n     * @param {Number} min 最小值\r\n     * @param {Number} max 最大值 \r\n     * @returns Number\r\n     */\r\n    getRangeNumber(min, max) {\r\n        return Math.round((Math.random() * (max - min)) + min);\r\n    }\r\n\r\n    /**\r\n     * 返回一个两位数的字符串,传入的数字小于10进行拼接\r\n     * @param {Number} num 传入的数字\r\n     * @returns String\r\n     */\r\n    getUseTwoNumberToString(num) {\r\n        let absNum = Math.abs(num);\r\n        return absNum < 10 ? `0${absNum}` : String(absNum);\r\n    }\r\n\r\n    /**\r\n     * 将数字转换成一个千位符并返回\r\n     * @param {Number} num 传入数字 \r\n     * @param {String} char 千位字符\r\n     * @returns String\r\n     */\r\n    getThousandsChar(num, char = ',') {\r\n        if (num < 1000) {\r\n            return String(num);\r\n        }\r\n        //Number.prototype.toLocaleString 可实现千位符\r\n        //去除小数点后面的数\r\n        let numStrs = String(num).split('.'),\r\n            thousandsChar = numStrs[0].replace(/(\\d)(?=(\\d{3})+$)/g, ($1) => {\r\n                return $1 + char;\r\n            })\r\n        return numStrs[1] ? [thousandsChar, numStrs[1]].join('.') : thousandsChar;\r\n    }\r\n}\r\n\r\nmodule.exports = new MathTool();","const MathTool = require('../mathTool/MathTool'),\r\n    StrategyFromTest = require('../fromTest/StrategyFromTest'),\r\n    MyTool = require('../tool'),\r\n    ymdReg = /^(YY).(MM).(DD).?$/,\r\n    hmsReg = /^(hh).(mm).(ss).?$/,\r\n    dateReg = /^(YY).(MM).(DD).?\\s(hh).(mm).?(ss)?.?$/,\r\n    formatTimeReg = /^(\\d{4})(?:\\D(\\d{1,2})\\D?)?(?:\\D(\\d{1,2})\\D?)?(?:\\s+(?:(\\d{1,2})\\D?)(?:\\D(\\d{1,2})\\D?)?(?:\\D(\\d{1,2}))?\\D?)?$/;\r\nclass Calendar {\r\n\r\n    _getCurDate() {\r\n        return new Date();\r\n    }\r\n\r\n    getMonth() {\r\n        const month = this.CurDate ? this.CurDate.getMonth() : this._getCurDate().getMonth();\r\n        return month + 1;\r\n    }\r\n\r\n    _createYMDArray() {\r\n        return [this.CurDate.getFullYear(), this.getMonth(), this.CurDate.getDate()];\r\n    }\r\n\r\n    _createHMSArray() {\r\n        return [this.CurDate.getHours(), this.CurDate.getMinutes(), this.CurDate.getSeconds()];\r\n    }\r\n\r\n    _createArray(format, captures) {\r\n        let date = null;\r\n        if (captures.length === 6) {\r\n            date = [].concat(this._createYMDArray(), this._createHMSArray());\r\n        } else {\r\n            date = ymdReg.test(format) ? this._createYMDArray() : this._createHMSArray();\r\n        }\r\n        return captures.map((val, index) => {\r\n            return { key: val, value: MathTool.getUseTwoNumberToString(date[index]) };\r\n        })\r\n    }\r\n\r\n    _warn(text) {\r\n        console.warn(text);\r\n    }\r\n\r\n    /**\r\n     * 获取返回时间格式对应的时间字符串\r\n     * @param {*} format 时间格式\r\n     * @param {*} reg 正则\r\n     * @returns String\r\n     */\r\n    _getReplaceFormat(format, reg) {\r\n        if (!reg) {\r\n            this._warn(`${format}格式不正确`);\r\n            return\r\n        }\r\n        return format.replace(reg, (match, ...captures) => {\r\n            captures.splice(-2);\r\n            const strs = this._createArray(format, captures);\r\n            return strs.map((str) => {\r\n                const { key, value } = str;\r\n                match = match.replace(key, value);\r\n                return match;\r\n            }).pop();\r\n        })\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} dateTime 时间\r\n     * @param {*} format 时间格式  默认时间格式YY.MM.DD hh:mm:ss 可选YY.MM.DD或hh:mm:ss\r\n     * @returns String\r\n     */\r\n    getStringCalender(dateTime, format = 'YY.MM.DD hh:mm:ss') {\r\n        this.CurDate = dateTime ? new Date(dateTime) : this._getCurDate();\r\n        const regs = [ymdReg, hmsReg, dateReg];\r\n        return this._getReplaceFormat(format, regs.find(reg => reg.test(format)));\r\n    }\r\n\r\n    //校验日历值是否与实际情况一致\r\n    _test({ months, days, hours, minutes, seconds }) {\r\n        const CurDate = this._getCurDate(),\r\n            oneDayTime = 1000 * 60 * 60 * 24;\r\n        CurDate.setMonth(months);\r\n        CurDate.setDate(1);\r\n        const maxData = new Date(CurDate.getTime() - oneDayTime).getDate();\r\n        StrategyFromTest.addCacheTest(months, { description: \"isLessThenValue\", value: 13, errorFn: () => MyTool._warn('月份不应超出12个月!') });\r\n        StrategyFromTest.addCacheTest(days, [\r\n            { description: \"isLessThenValue\", value: 32, errorFn: () => MyTool._warn('日期不应大于31号!') },\r\n            //该校验日期不应大于当月的最大日期\r\n            { description: \"isLessThenValue\", value: maxData + 1, errorFn: () => MyTool._warn(`日期不应大于${months}月最大日期${maxData}!`) }\r\n        ]);\r\n        StrategyFromTest.addCacheTest(hours, { description: \"isLessThenValue\", value: 24, errorFn: () => MyTool._warn('小时不应超过24!') });\r\n        StrategyFromTest.addCacheTest(minutes, { description: \"isLessThenValue\", value: 60, errorFn: () => MyTool._warn('分钟不应超出60分钟!') });\r\n        StrategyFromTest.addCacheTest(seconds, { description: \"isLessThenValue\", value: 60, errorFn: () => MyTool._warn('秒不应超出60秒!') });\r\n        return StrategyFromTest.start();\r\n    }\r\n\r\n    _dealWith([year, months = 1, days = 1, hours = 0, minutes = 0, seconds = 0]) {\r\n        const curDate = this._getCurDate();\r\n        if (this._test({ months, days, hours, minutes, seconds })) {\r\n            curDate.setFullYear(year);\r\n            curDate.setMonth(Number(months - 1));\r\n            curDate.setDate(days);\r\n            curDate.setHours(hours);\r\n            curDate.setMinutes(minutes);\r\n            curDate.setSeconds(seconds);\r\n        }\r\n        return curDate.getTime();\r\n    }\r\n\r\n    _replace(dataSource) {\r\n        return dataSource.replace(formatTimeReg, (match, ...arg) => {\r\n            arg.splice(-2);\r\n            return this._dealWith(arg);\r\n        })\r\n    }\r\n\r\n    _stringToTime(dataSource) {\r\n        return formatTimeReg.test(dataSource) ? Number(this._replace(dataSource)) : this._warn('时间格式错误!');\r\n    }\r\n\r\n    getTime(dataSource) {\r\n        return dataSource ? this._stringToTime(dataSource.trim()) : this._getCurDate().getTime();\r\n    }\r\n}\r\n\r\nmodule.exports = new Calendar();","const StrategyFromTest = require('../fromTest/StrategyFromTest'),\r\n    { isValueNoEmpty, _warn } = require('../tool')\r\nclass MyEvent {\r\n    constructor() {\r\n        this.event = {};\r\n    }\r\n\r\n    _isHaveKey(key) {\r\n        StrategyFromTest.addCacheTest(key, Object.assign(isValueNoEmpty, { errorFn: () => _warn('事件名不能为空') }));\r\n        return StrategyFromTest.start();\r\n    }\r\n\r\n    _isHaveKeyAndValue(key, value) {\r\n        const isHaveKey = this._isHaveKey(key);\r\n        StrategyFromTest.addCacheTest(value, Object.assign(isValueNoEmpty, { errorFn: () => _warn('事件事件不能为空') }))\r\n        return isHaveKey && StrategyFromTest.start();\r\n    }\r\n\r\n    _isTypeFunc(value) {\r\n        let type = Object.prototype.toString.call(value);\r\n        return /Function/.test(type);\r\n    }\r\n\r\n    _addEvent(key, value, once = false) {\r\n        if (this._isHaveKeyAndValue(key, value)) {\r\n            once && this._isTypeFunc(value) ? value.once = true : null;\r\n            if (this.event.hasOwnProperty(key)) {\r\n                this.event[key].includes(value) ? null : this.event[key].push(value);\r\n                return;\r\n            }\r\n            this.event[key] = [value];\r\n        }\r\n    }\r\n\r\n    on(key, value) {\r\n        this._addEvent(key, value);\r\n    }\r\n\r\n    once(key, value) {\r\n        this._addEvent(key, value, true);\r\n    }\r\n\r\n    _deleteKey(key) {\r\n        StrategyFromTest.addCacheTest(this.event[key], { description: 'islengthNoZero' });\r\n        StrategyFromTest.start() ? null : delete this.event[key];\r\n    }\r\n\r\n    trigger(key) {\r\n        let values = this.event[key];\r\n        if (!this._isHaveKey(key) || !values) return;\r\n        values.forEach((value, index) => {\r\n            this._isTypeFunc(value) ? value() : null;\r\n            value.once ? this.event[key].splice(index, 1)&&this._deleteKey(key) : null;\r\n        })\r\n    }\r\n\r\n    remove(key) {\r\n        this._isHaveKey(key) ? delete this.event[key] : null;\r\n    }\r\n}\r\n\r\nmodule.exports = new MyEvent();\r\n","/**\r\n * 防抖:n秒后执行,如果n秒内再次触发，则重新计算执行时间\r\n * 节流:n秒内只执行一次\r\n */\r\nclass DebounceAndThrottle {\r\n    constructor() {\r\n        this.debounceTime = null;\r\n        this.throttleTime = null;\r\n    }\r\n    /**\r\n     * 防抖\r\n     * @param {*} fn 回调函数\r\n     * @param {*} wait 等待时间\r\n     * @param {*} immediate 是否立即执行\r\n     */\r\n    debounce(fn, wait = 1000, immediate = false) {\r\n        let self = this;\r\n        //立即执行\r\n        immediate ? fn.call(this) : null;\r\n        return function () {\r\n            self.debounceTime && clearTimeout(self.debounceTime);\r\n            self.debounceTime = setTimeout(() => {\r\n                fn.apply(this, arguments);\r\n            }, wait)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 取消防抖执行事件\r\n     */\r\n    cancelDebounce() {\r\n        this.debounceTime && clearTimeout(this.debounceTime);\r\n        this.debounceTime = null;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 节流\r\n     * @param {*} fn 回调函数 \r\n     * @param {*} wait 等待时间\r\n     */\r\n    throttle(fn, wait = 1000, immediate = false) {\r\n        let self = this;\r\n        immediate ? fn() : null;\r\n        return function () {\r\n            if (self.throttleTime) return;\r\n            self.throttleTime = setTimeout(() => {\r\n                self.throttleTime = null;\r\n                fn.apply(this, arguments);\r\n            }, wait)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 取消节流执行事件\r\n     */\r\n    cancelThrottle() {\r\n        this.throttleTime && clearTimeout(this.throttleTime);\r\n        this.throttleTime = null;\r\n    }\r\n}\r\n\r\nmodule.exports = new DebounceAndThrottle();"]}